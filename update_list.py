import os
import json
import time
from datetime import datetime
from PIL import Image
import pymysql
import json.decoder # 2024-07-15 Êñ∞Â¢ûÔºöÂØºÂÖ•JSONËß£Á†ÅÂô®ÔºåÁî®‰∫éÊçïËé∑ÁâπÂÆöÈîôËØØ

# Êï∞ÊçÆÂ∫ìÈÖçÁΩÆ
DB_CONFIG = {
    'host': 'localhost',
    'user': 'root',
    'password': '',
    'database': 'wallpaper_db'
}

# È¢ÑÂÆö‰πâÁöÑÂàÜÁ±ªÂíåÊ†áÁ≠æÊò†Â∞Ñ
CATEGORY_TAGS = {
    'È£éÊôØ': ['Ëá™ÁÑ∂', 'Â±±Ê∞¥', 'Â§©Á©∫', 'Êµ∑Ê¥ã', 'Ê£ÆÊûó', 'Êó•Âá∫', 'Êó•ËêΩ', 'È£éÊôØ'],
    'Âä®Áâ©': ['ÂÆ†Áâ©', 'ÈáéÁîüÂä®Áâ©', 'È∏üÁ±ª', 'Êµ∑Ê¥ãÁîüÁâ©', 'Âä®Áâ©'],
    'Âª∫Á≠ë': ['ÂüéÂ∏Ç', 'Âª∫Á≠ë', 'ÂÆ§ÂÜÖ', 'Ë°óÈÅì', 'Âª∫Á≠ë'],
    'Ëâ∫ÊúØ': ['ÊäΩË±°', 'Ëâ∫ÊúØ', 'ÂàõÊÑè', 'ËÆæËÆ°', 'ÁªòÁîª', 'Êï∞Â≠óËâ∫ÊúØ'],
    '‰∫∫Áâ©': ['‰∫∫ÂÉè', 'ËÇñÂÉè', 'ÁîüÊ¥ª', 'Áî∑ÊÄß', 'Â•≥ÊÄß', 'Â≠©Â≠ê'],
    'ÁßëÊäÄ': ['ÁßëÊäÄ', 'Êú™Êù•', 'ÁßëÂπª', 'Êú∫Âô®‰∫∫', 'Â§™Á©∫'],
    'ÁæéÈ£ü': ['È£üÁâ©', 'È•ÆÊñô', 'ÁîúÁÇπ', 'Ê∞¥Êûú', 'Ëî¨Ëèú'],
    'ËøêÂä®': ['‰ΩìËÇ≤', 'ËøêÂä®', 'ÂÅ•Ë∫´', 'Á´ûÊäÄ'],
    'ÂπªÊÉ≥': ['Á•ûËØù', 'È≠îÂπª', 'ÊÄ™ÂÖΩ', 'ÊÅ∂È≠î', 'Â§©‰Ωø', 'Èæô', 'È≠îÊ≥ï', 'ÂºÇ‰∏ñÁïå'],
    'ÂÖ∂‰ªñ': ['ÊäΩË±°', 'ÁÆÄÁ∫¶', 'Á∫πÁêÜ', 'ÈÄöÁî®']
}

# ÊîØÊåÅÁöÑÂõæÁâáÊ†ºÂºè
SUPPORTED_FORMATS = ('.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp')

def get_image_dimensions(image_path):
    """Ëé∑ÂèñÂõæÁâáÂ∞∫ÂØ∏"""
    try:
        with Image.open(image_path) as img:
            return img.size  # ËøîÂõû (width, height)
    except Exception as e:
        print(f"Warning: Cannot get dimensions for {image_path}: {e}")
        return (0, 0)

def analyze_filename(filename):
    """
    Ê†πÊçÆÊñá‰ª∂ÂêçÊô∫ËÉΩÂà§Êñ≠ÂàÜÁ±ªÔºå‰ΩÜÊ†áÁ≠æÂßãÁªà‰∏∫Á©∫
    @param {str} filename - ÂõæÁâáÊñá‰ª∂Âêç
    @returns {Object} - ÂåÖÂê´ÂàÜÁ±ªÂíåÁ©∫Ê†áÁ≠æÁöÑÂ≠óÂÖ∏
    """
    filename_lower = filename.lower()
    category = 'ÂÖ∂‰ªñ'
    
    # 2024-07-15 Áî®Êà∑Ë¶ÅÊ±ÇÊ†áÁ≠æ‰∏∫Á©∫ÔºåÂõ†Ê≠§Ê≥®ÈáäÊéâÊâÄÊúâÊ†áÁ≠æÁîüÊàêÈÄªËæë
    # tags = set() # ‰ΩøÁî®setÈÅøÂÖçÈáçÂ§ç

    # ÂàÜÁ±ªÂÖ≥ÈîÆËØçÊò†Â∞Ñ - Êåâ‰ºòÂÖàÁ∫ßÊéíÂ∫èÔºå‰ºòÂåñÂàÜÁ±ªÂà§Êñ≠ÈÄªËæë
    category_keywords = {
        'ÂπªÊÉ≥': ['fantasy', 'mythical', 'monster', 'demon', 'angel', 'dragon', 'ÂπªÊÉ≥', 'Á•ûËØù', 
                'È≠îÂπª', 'ÊÄ™ÂÖΩ', 'ÊÅ∂È≠î', 'Â§©‰Ωø', 'Èæô', 'Â∑®ÂÖΩ', 'Â∑®Áúº', 'Â∫üÂúü', 'È≤õ‰∫∫', 'È≠îÁâ©', 'ÊäòÁøºÂ§©‰Ωø',
                'Êú´Êó•', 'ÂºÇ‰∏ñÁïå', 'È≠îÊ≥ï', 'Á•ûÁßò', 'Ë∂ÖÁé∞ÂÆû'],
        '‰∫∫Áâ©': ['portrait', 'people', 'person', '‰∫∫Áâ©', 'ÁæéÂ•≥', 'Â∞ëÂπ¥', 'ÂÖ¨‰∏ª', 'Âæ°Âßê', 
                'ÂÖãÊù∞ÈÄä', 'Êù∞ÂÖãÈÄä', 'Á•ûÁßò‰∫∫', 'ËµõÂçö‰∫∫Êú∫Â•≥', 'Èõ®Â§úÊíë‰ºûÂ•≥', 'Â∞ëÂ•≥', 'Â•≥Â≠©', 'Áî∑ÊÄß',
                'Â•≥ÊÄß', 'ËÇñÂÉè', '‰∫∫ÂÉè', 'cos', 'cosplay', 'ÊòéÊòü', 'ÂêàÂΩ±'],
        'Âä®Áâ©': ['animal', 'pet', 'bird', 'wildlife', 'Âä®Áâ©', 'Áä¨', 'Áå™', 'Èπø', 'ÁãêÁã∏', 'Áå´', 'Áãº‰∫∫',
                'Â∞èÁå´', 'Â∞èÈπø', 'ÂÖ´Êàí', 'Á´πÁºñ', 'ËêåÂÖΩ', '‰∏òÊØîÁâπ'],
        'ÁßëÊäÄ': ['tech', 'future', 'sci-fi', 'ÁßëÊäÄ', 'Â§™Á©∫Ëà™Ë°å', 'ËµõÂçö', 'cyber', 'Êú∫Ê¢∞', 'Êï∞Â≠ó‰∫∫',
                'ÂÖ®ÊÅØ', 'ÊäïÂΩ±', 'ÁîµÂ≠ê', 'ÈõÜÂ∏Ç'],
        'È£éÊôØ': ['landscape', 'nature', 'mountain', 'sea', 'sky', 'È£éÊôØ', 'Ëá™ÁÑ∂', 'Â±±Ê∞¥', 'Á†¥Êôì',
                'ÊòüËäí', 'Á••‰∫ë', 'ÈùíÊúà'],
        'Âª∫Á≠ë': ['building', 'city', 'architecture', 'street', 'Âª∫Á≠ë', 'ÂüéÂ∏Ç', 'Â∑•ÂéÇ'],
        'Ëâ∫ÊúØ': ['art', 'abstract', 'design', 'Ëâ∫ÊúØ', 'Êó∂ÂÖâ‰πãÁøº', 'ÊòüËäíÁ†¥Êôì', 'ÁÇ≠Á¨î', 
                'Ë°ÄËâ≤ÊÆãÈò≥', 'ËØ¶‰∫ëÂ≠ó‰Ωì', 'Áù°Ê¢¶ÂÖ¨Âºè', 'ÂÖâÁªò', 'ÊïÖÈöú', 'ÂÖãËé±Âõ†Ëìù', '4kÊ†áÂøó',
                'ÊâãÊú∫Â£≥', 'Ëä±ÁéØ', 'ÊõºÈôÄÊ≤ôÂçé'],
        'ÁæéÈ£ü': ['food', 'drink', 'dessert', 'ÁæéÈ£ü'],
        'ËøêÂä®': ['sport', 'fitness', 'exercise', 'ËøêÂä®']
    }

    # Âà§Êñ≠ÂàÜÁ±ª
    for cat, keywords in category_keywords.items():
        if any(keyword in filename_lower for keyword in keywords):
            category = cat
            break

    # 2024-07-15 Áî®Êà∑Ë¶ÅÊ±ÇÊ†áÁ≠æ‰∏∫Á©∫ÔºåÂõ†Ê≠§‰∏çÁîüÊàê‰ªª‰ΩïÊ†áÁ≠æ
    final_tags = []
    
    return {
        'category': category,
        'tags': final_tags
    }

def escape_sql_string(text):
    """ËΩ¨‰πâSQLÂ≠óÁ¨¶‰∏≤‰∏≠ÁöÑÁâπÊÆäÂ≠óÁ¨¶"""
    if text is None:
        return ''
    return text.replace("'", "\\'").replace('"', '\\"').replace('\\', '\\\\')

def generate_unique_id(base_time, index, used_ids):
    """ÁîüÊàêÂîØ‰∏ÄÁöÑÊï∞Â≠óID"""
    unique_id = int(f"{base_time}{index:04d}")
    while unique_id in used_ids:
        unique_id += 1
    used_ids.add(unique_id)
    return unique_id

def get_existing_wallpapers_from_db():
    """
    Êü•ËØ¢Êï∞ÊçÆÂ∫ìÔºåËé∑ÂèñÊâÄÊúâÂ∑≤Â≠òÂú®ÁöÑÂ£ÅÁ∫∏Êñá‰ª∂ÂêçÂíåID
    @returns {dict} - {filename: id}
    """
    conn = None
    result = {}
    try:
        conn = pymysql.connect(
            host=DB_CONFIG['host'],
            user=DB_CONFIG['user'],
            password=DB_CONFIG['password'],
            database=DB_CONFIG['database'],
            charset='utf8mb4'
        )
        cursor = conn.cursor()
        cursor.execute("SELECT file_path, id FROM wallpapers")
        for row in cursor.fetchall():
            file_path = row[0]
            filename = os.path.basename(file_path)
            result[filename] = row[1]
    except Exception as e:
        print(f"‚ùå Êï∞ÊçÆÂ∫ìÊü•ËØ¢Â§±Ë¥•: {e}")
        return None
    finally:
        if conn:
            conn.close()
    return result

# Â∑≤ÁßªÈô§get_all_wallpapers_from_dbÂáΩÊï∞ÔºåÂõ†‰∏∫‰∏çÂÜçÈúÄË¶ÅÁîüÊàêlist.json

def generate_short_id(date_str, seq):
    """
    ÁîüÊàêÁü≠IDÔºåÊ†ºÂºè‰∏∫YYYYMMDD+ÈÄíÂ¢ûÂè∑ÔºàÂ¶Ç202507151„ÄÅ20250715100ÔºâÔºåÈÄíÂ¢ûÂè∑‰∏çÂÅö‰ΩçÊï∞ÈôêÂà∂
    @param {str} date_str - Êó•ÊúüÂ≠óÁ¨¶‰∏≤YYYYMMDD
    @param {int} seq - ÂΩìÂ§©ÈÄíÂ¢ûÂ∫èÂè∑
    @returns {int}
    """
    return int(f"{date_str}{seq}")



def find_latest_period():
    """
    ÂÄíÂ∫èÊâ´ÊèèÊúüÊï∞ÁõÆÂΩïÔºåÊâæÂà∞ÊúÄÊñ∞ÁöÑÈùûÁ©∫ÊúüÊï∞
    @returns {str} - ÊúÄÊñ∞ÊúüÊï∞ÔºåÂ¶Ç'003'ÔºåÂ¶ÇÊûúÊ≤°ÊúâÊâæÂà∞ËøîÂõû'001'
    """
    base_dir = os.path.dirname(__file__)
    wallpapers_base = os.path.join(base_dir, 'static', 'wallpapers')
    
    if not os.path.exists(wallpapers_base):
        print(f"‚ùå Â£ÅÁ∫∏Âü∫Á°ÄÁõÆÂΩï‰∏çÂ≠òÂú®: {wallpapers_base}")
        return '001'
    
    # Êâ´ÊèèÊâÄÊúâÊúüÊï∞ÁõÆÂΩï
    period_dirs = []
    for item in os.listdir(wallpapers_base):
        item_path = os.path.join(wallpapers_base, item)
        if os.path.isdir(item_path) and item.isdigit() and len(item) == 3:
            period_dirs.append(item)
    
    if not period_dirs:
        print("üìÅ Êú™ÊâæÂà∞ÊúüÊï∞ÁõÆÂΩïÔºå‰ΩøÁî®ÈªòËÆ§ÊúüÊï∞001")
        return '001'
    
    # ÂÄíÂ∫èÊéíÂàóÊúüÊï∞
    period_dirs.sort(reverse=True)
    
    # ‰ªéÊúÄÊñ∞ÊúüÊï∞ÂºÄÂßãÊ£ÄÊü•ÔºåÊâæÂà∞Á¨¨‰∏Ä‰∏™ÈùûÁ©∫ÁõÆÂΩï
    for period in period_dirs:
        period_path = os.path.join(wallpapers_base, period)
        image_files = [
            f for f in os.listdir(period_path)
            if os.path.isfile(os.path.join(period_path, f))
            and f.lower().endswith(SUPPORTED_FORMATS)
        ]
        if image_files:
            print(f"üéØ ÊâæÂà∞ÊúÄÊñ∞ÊúüÊï∞: {period} (ÂåÖÂê´ {len(image_files)} ‰∏™ÂõæÁâáÊñá‰ª∂)")
            return period
    
    print("üìÅ ÊâÄÊúâÊúüÊï∞ÁõÆÂΩïÈÉΩ‰∏∫Á©∫Ôºå‰ΩøÁî®ÈªòËÆ§ÊúüÊï∞001")
    return '001'

def update_wallpaper_list(period=None, auto_upload=False):
    """
    Â¢ûÈáèÊõ¥Êñ∞Â£ÅÁ∫∏ÂàóË°®ÔºåÂè™‰∏∫Êñ∞ÂõæÁâáÂàÜÈÖçÊñ∞IDÂπ∂ÂØºÂÖ•ÔºåËÄÅÂõæÁâáID‰∏çÂèò
    @param {str} period - ÊåáÂÆöÊúüÊï∞ÔºåÂ¶Ç'002'ÔºåÂ¶ÇÊûú‰∏∫NoneÂàôËá™Âä®Ê£ÄÊµãÊúÄÊñ∞ÊúüÊï∞
    @param {bool} auto_upload - ÊòØÂê¶Ëá™Âä®‰∏ä‰º†Âà∞Êï∞ÊçÆÂ∫ì
    """
    # Ëá™Âä®Ê£ÄÊµãÊúÄÊñ∞ÊúüÊï∞
    if period is None:
        period = find_latest_period()
    
    # Ë∑ØÂæÑÈÖçÁΩÆ
    base_dir = os.path.dirname(__file__)
    wallpapers_dir = os.path.join(base_dir, 'static', 'wallpapers', period)
    sql_path = os.path.join(base_dir, f'wallpapers_import_{period}.sql')
    
    if not os.path.exists(wallpapers_dir):
        print(f"‚ùå ÊåáÂÆöÊúüÊï∞ÁõÆÂΩï‰∏çÂ≠òÂú®: {wallpapers_dir}")
        return False
    
    print(f"üìÇ Â§ÑÁêÜÊúüÊï∞: {period}")
    print(f"üìÇ Â£ÅÁ∫∏ÁõÆÂΩï: {wallpapers_dir}")

    # ËØªÂèñÊï∞ÊçÆÂ∫ìÂ∑≤Â≠òÂú®Â£ÅÁ∫∏
    db_wallpapers = get_existing_wallpapers_from_db()  # {filename: id}
    if db_wallpapers is None:
        print("üî¥ Êï∞ÊçÆÂ∫ìÊü•ËØ¢Â§±Ë¥•ÔºåÁªàÊ≠¢Êï∞ÊçÆÁîüÊàê‰ªªÂä°„ÄÇ")
        return False
    print(f"üì¶ Êï∞ÊçÆÂ∫ìÂ∑≤ÊúâÂ£ÅÁ∫∏: {len(db_wallpapers)} ‰∏™")

    # Êï∞ÊçÆÂ∑≤ËøÅÁßªÂà∞Êï∞ÊçÆÂ∫ìÔºå‰∏çÂÜçÈúÄË¶ÅÂ§ÑÁêÜlist.json

    # Ëé∑ÂèñÊâÄÊúâÂõæÁâáÊñá‰ª∂
    image_files = [
        f for f in os.listdir(wallpapers_dir)
        if os.path.isfile(os.path.join(wallpapers_dir, f))
        and f.lower().endswith(SUPPORTED_FORMATS)
    ]
    print(f"üñºÔ∏è ÂΩìÂâçÂ£ÅÁ∫∏ÁõÆÂΩïÂõæÁâá: {len(image_files)} ‰∏™")

    # ÊâæÂá∫Êñ∞ÂõæÁâá
    new_files = [f for f in image_files if f not in db_wallpapers]
    print(f"‚ú® Êñ∞Â¢ûÂõæÁâá: {len(new_files)} ‰∏™")

    sql_values = []

    if new_files:
        print("‚úÖ Â§ÑÁêÜÊñ∞Â¢ûÂõæÁâá...")

        # Ëé∑Âèñ‰ªäÊó•Â∑≤ÊúâIDÁöÑÊúÄÂ§ßÂ∫èÂè∑
        today_str = datetime.now().strftime('%Y%m%d')
        seq = 1
        try:
            conn = pymysql.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT id FROM wallpapers WHERE id LIKE %s ORDER BY id DESC LIMIT 1", (f"{today_str}%",))
            result = cursor.fetchone()
            if result:
                last_id = str(result[0])
                if len(last_id) > 8:
                    seq = int(last_id[8:]) + 1
            conn.close()
        except Exception as e:
            print(f"Warning: Ëé∑Âèñ‰ªäÊó•IDÂ∫èÂè∑Â§±Ë¥•: {e}")

        for filename in new_files:
            file_path = os.path.join(wallpapers_dir, filename)
            name_without_ext = os.path.splitext(filename)[0]
            width, height = get_image_dimensions(file_path)
            size_bytes = os.path.getsize(file_path)
            if size_bytes < 1024 * 1024:
                size_str = f"{size_bytes / 1024:.1f} KB"
            else:
                size_str = f"{size_bytes / (1024 * 1024):.2f} MB"
            try:
                with Image.open(file_path) as img:
                    img_format = img.format
            except Exception as e:
                img_format = ''
            
            analyzed_info = analyze_filename(filename)
            category = analyzed_info['category']
            tags_list = analyzed_info['tags']
            
            new_id = generate_short_id(today_str, seq)
            seq += 1
            # ‰∏çÂÜçÁîüÊàêfile_infoÔºåÁõ¥Êé•Â§ÑÁêÜSQL
            tags_string = ','.join(tags_list)
            sql_value = (
                f"  ({new_id}, 1, '{escape_sql_string(name_without_ext)}', '', '{escape_sql_string(f'static/wallpapers/{period}/{filename}')}', '{escape_sql_string(size_str)}', "
                f"{width}, {height}, '{escape_sql_string(category)}', '', '{escape_sql_string(img_format)}', "
                f"0, 0, '{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}', '{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}')"
            )
            sql_values.append(sql_value)
            print(f"‚úÖ Êñ∞Â¢û: {filename} -> ID: {new_id}")

        # ‰∏çÂÜçÁîüÊàêlist.jsonÊñá‰ª∂

        if sql_values:
            # ÁîüÊàêSQLÊñá‰ª∂
            sql_content = [
                f"-- Êñ∞Â¢ûÂ£ÅÁ∫∏Êï∞ÊçÆÂØºÂÖ•SQLÊñá‰ª∂ (ÊúüÊï∞: {period})\n",
                f"-- ÁîüÊàêÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n",
                f"-- Êï∞ÊçÆÂ∫ì: {DB_CONFIG['database']}\n",
                f"-- Êñ∞Â¢û {len(sql_values)} Êù°ËÆ∞ÂΩï\n\n",
                f"USE `{DB_CONFIG['database']}`;\n\n",
                "INSERT INTO `wallpapers` (`id`, `user_id`, `title`, `description`, `file_path`, `file_size`, `width`, `height`, `category`, `tags`, `format`, `views`, `likes`, `created_at`, `updated_at`) VALUES\n"
            ]
            for i, sql_value in enumerate(sql_values):
                sql_content.append(sql_value)
                if i < len(sql_values) - 1:
                    sql_content.append(",\n")
                else:
                    sql_content.append(";\n")
            with open(sql_path, 'w', encoding='utf-8') as f:
                f.writelines(sql_content)
            print(f"\nüéâ Êñ∞Â¢ûÂõæÁâáSQLÂ∑≤ÁîüÊàê: {os.path.abspath(sql_path)}")
            
            # Â¶ÇÊûúÂêØÁî®Ëá™Âä®‰∏ä‰º†ÔºåÁõ¥Êé•ÊèíÂÖ•Êï∞ÊçÆÂ∫ì
            if auto_upload:
                try:
                    conn = pymysql.connect(**DB_CONFIG)
                    cursor = conn.cursor()
                    
                    insert_sql = "INSERT INTO `wallpapers` (`id`, `user_id`, `title`, `description`, `file_path`, `file_size`, `width`, `height`, `category`, `tags`, `format`, `views`, `likes`, `created_at`, `updated_at`) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"
                    
                    # 2025-01-15 ÂΩªÂ∫ï‰øÆÂ§çIDÂÜ≤Á™ÅÔºöÈáçÁΩÆseqÂà∞ÂàùÂßãÂÄºÔºåÁ°Æ‰øù‰∏éSQLÊñá‰ª∂ÂÆåÂÖ®‰∏ÄËá¥
                    # ÈáçÊñ∞Ëé∑ÂèñÂàùÂßãseqÂÄºÔºåÂõ†‰∏∫ÂâçÈù¢ÁöÑÂæ™ÁéØÂ∑≤Áªè‰øÆÊîπ‰∫Üseq
                    upload_seq = 1
                    try:
                        temp_conn = pymysql.connect(**DB_CONFIG)
                        temp_cursor = temp_conn.cursor()
                        temp_cursor.execute("SELECT id FROM wallpapers WHERE id LIKE %s ORDER BY id DESC LIMIT 1", (f"{today_str}%",))
                        temp_result = temp_cursor.fetchone()
                        if temp_result:
                            temp_last_id = str(temp_result[0])
                            if len(temp_last_id) > 8:
                                upload_seq = int(temp_last_id[8:]) + 1
                        temp_conn.close()
                    except Exception as e:
                        print(f"Warning: ÈáçÊñ∞Ëé∑ÂèñIDÂ∫èÂè∑Â§±Ë¥•: {e}")
                    
                    upload_count = 0
                    for filename in new_files:
                        file_path = os.path.join(wallpapers_dir, filename)
                        name_without_ext = os.path.splitext(filename)[0]
                        
                        width, height = get_image_dimensions(file_path)
                        size_bytes = os.path.getsize(file_path)
                        if size_bytes < 1024 * 1024:
                            size_str = f"{size_bytes / 1024:.1f} KB"
                        else:
                            size_str = f"{size_bytes / (1024 * 1024):.2f} MB"
                        
                        try:
                            with Image.open(file_path) as img:
                                img_format = img.format
                        except Exception as e:
                            img_format = ''
                        
                        analyzed_info = analyze_filename(filename)
                        category = analyzed_info['category']
                        tags_list = analyzed_info['tags']
                        
                        # ‰ΩøÁî®‰∏éSQLÁîüÊàêÊó∂ÂÆåÂÖ®Áõ∏ÂêåÁöÑIDËÆ°ÁÆóÊñπÂºè
                        new_id = generate_short_id(today_str, upload_seq + upload_count)
                        tags_string = ','.join(tags_list)
                        
                        cursor.execute(insert_sql, (
                            new_id, 1, name_without_ext, '', f'static/wallpapers/{period}/{filename}',
                            size_str, width, height, category, '', img_format,
                            0, 0, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        ))
                        upload_count += 1
                    
                    conn.commit()
                    conn.close()
                    print(f"‚úÖ ÊàêÂäü‰∏ä‰º† {upload_count} Êù°ËÆ∞ÂΩïÂà∞Êï∞ÊçÆÂ∫ì")
                    print(f"üìã ‰ΩøÁî®ÁöÑIDËåÉÂõ¥: {generate_short_id(today_str, upload_seq)} - {generate_short_id(today_str, upload_seq + upload_count - 1)}")
                    
                except Exception as e:
                    print(f"‚ùå Êï∞ÊçÆÂ∫ì‰∏ä‰º†Â§±Ë¥•: {e}")
                    if 'conn' in locals():
                        conn.rollback()
                        conn.close()
                    return False
        else:
            print("Êó†Êñ∞Â¢ûÂõæÁâáÔºåÊó†ÈúÄÁîüÊàêSQLÊñá‰ª∂")
    else:
        print("‚ÑπÔ∏è Êó†Êñ∞Â¢ûÂõæÁâá„ÄÇ")

    # Ëé∑ÂèñÊï∞ÊçÆÂ∫ì‰∏≠ÁöÑÊÄªÊï∞
    try:
        conn = pymysql.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM wallpapers")
        total_count = cursor.fetchone()[0]
        conn.close()
        print(f"\nüìä Êï∞ÊçÆÂ∫ì‰∏≠Â£ÅÁ∫∏ÊÄªÊï∞: {total_count}")
    except Exception as e:
        print(f"Warning: Ëé∑ÂèñÊÄªÊï∞Â§±Ë¥•: {e}")
    
    return True

if __name__ == '__main__':
    import sys
    
    # Ëß£ÊûêÂëΩ‰ª§Ë°åÂèÇÊï∞
    period = None
    auto_upload = False
    
    if len(sys.argv) > 1:
        for arg in sys.argv[1:]:
            if arg.startswith('--period='):
                period = arg.split('=')[1]
            elif arg == '--upload':
                auto_upload = True
            elif arg == '--help':
                print("‰ΩøÁî®ÊñπÊ≥ï:")
                print("  python update_list.py                    # Ëá™Âä®Ê£ÄÊµãÊúÄÊñ∞ÊúüÊï∞Ôºå‰ªÖÁîüÊàêSQL")
                print("  python update_list.py --period=002       # ÊåáÂÆöÊúüÊï∞002")
                print("  python update_list.py --upload           # Ëá™Âä®‰∏ä‰º†Âà∞Êï∞ÊçÆÂ∫ì")
                print("  python update_list.py --period=003 --upload  # ÊåáÂÆöÊúüÊï∞Âπ∂‰∏ä‰º†")
                sys.exit(0)
    
    print("üöÄ ÂºÄÂßãÊõ¥Êñ∞Â£ÅÁ∫∏ÂàóË°®...")
    if period:
        print(f"üìå ÊåáÂÆöÊúüÊï∞: {period}")
    if auto_upload:
        print("üì§ ÂêØÁî®Ëá™Âä®‰∏ä‰º†Âà∞Êï∞ÊçÆÂ∫ì")
    
    success = update_wallpaper_list(period=period, auto_upload=auto_upload)
    if success:
        print("\n‚ú® ÊâÄÊúâÊìç‰ΩúÂÆåÊàêÔºÅ")
        if not auto_upload:
            print("\nüí° SQLÊñá‰ª∂Â∑≤ÁîüÊàê‰ΩÜÊú™‰∏ä‰º†Âà∞Êï∞ÊçÆÂ∫ìÔºåÊÇ®ÂèØ‰ª•:")
            print("  1. ‰ΩøÁî® --upload ÂèÇÊï∞ÈáçÊñ∞ËøêË°å‰ª•Ëá™Âä®‰∏ä‰º†:")
            if period:
                print(f"     python update_list.py --period={period} --upload")
            else:
                print("     python update_list.py --upload")
            print("  2. ÊâãÂä®ÂØºÂÖ•SQLÊñá‰ª∂Âà∞Êï∞ÊçÆÂ∫ì:")
            if period:
                print(f"     mysql -u {DB_CONFIG['user']} {DB_CONFIG['database']} < wallpapers_import_{period}.sql")
            else:
                latest_period = find_latest_period()
                print(f"     mysql -u {DB_CONFIG['user']} {DB_CONFIG['database']} < wallpapers_import_{latest_period}.sql")
            print("\n  ËæìÂÖ• python update_list.py --help Êü•ÁúãÊõ¥Â§öÈÄâÈ°π")
    else:
        print("\nüí• Êìç‰ΩúÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÈîôËØØ‰ø°ÊÅØ")